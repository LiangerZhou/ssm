<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 自动扫描(自动注入)，扫描com.liang这个包以及它的子包的所有使用注解标注的类 -->
	<context:component-scan base-package="com.liang" />


	<!-- 1、引入数据库属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 2、配置连接池 -->
	<!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
     <property name="driverClassName" value="${driverClassName}"/>
     <property name="url" value="${url}" />
     <property name="username" value="${user}" />
     <property name="password" value="${password}" />

     <property name="filters" value="stat" />

     <property name="maxActive" value="20" />
     <property name="initialSize" value="1" />
     <property name="maxWait" value="60000" />
     <property name="minIdle" value="1" />

     <property name="timeBetweenEvictionRunsMillis" value="60000" />
     <property name="minEvictableIdleTimeMillis" value="300000" />

     <property name="testWhileIdle" value="true" />
     <property name="testOnBorrow" value="true" />
     <property name="testOnReturn" value="true" />

     <property name="poolPreparedStatements" value="true" />
     <property name="maxOpenPreparedStatements" value="20" />
 </bean>

	<!--3.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--往下才是mybatis和spring真正整合的配置 -->
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation：用于指定Mybatis的配置文件位置。如果指定了该属性，那么会以该配置文件的内容作为配置信息构建对应的SqlSessionFactoryBuilder，但是后续属性指定的内容会覆盖该配置文件里面指定的对应内容。 -->
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml" /> -->
		<!--typeAliasesPackage：它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。多个package之间可以用逗号或者分号等来进行分隔。(value的值一定要是包的全名) -->
		<property name="typeAliasesPackage" value="com.liang.entity" />
		<!--mapperLocations：它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值；扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:com/liang/mapper/*.xml" />
	</bean>

	<!--4:配置扫描Dao接口包,动态实现DAO接口,注入到spring容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入SqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的Dao接口 -->
		<property name="basePackage" value="com.liang.mapper" />
	</bean>

	<!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>